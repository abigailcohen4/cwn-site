import{b as l,f as c}from"./builderUtils-2q8a9uAc.js";import{u as h}from"./offsetUtils-DTm7SaL6.js";import{o as g}from"./shapeUtils-Bjg7vQKQ.js";import{gg as d,g8 as u,aG as b,fU as P}from"./index-c9VjcUA7.js";import"./createPresetServiceEdit-C3R2zxgH.js";import"./affineTransformOperator-DPfrRbAX.js";import"./SimpleGeometryCursor-B92kdZ15.js";import"./Transformation2D-CJmlXOyD.js";import"./apiConverter-Boq2_3p7.js";import"./ProjectionTransformation-CmjYAmv0.js";import"./jsonConverter-C7hXxI07.js";import"./Transformation-LZkFVlxF.js";import"./offsetOperator-1_XXLcre.js";import"./operatorOffset-Bfcuhx1J.js";function q({templatePart:r,shape:o,edits:s,relationships:m,mode:a}){let i=[];if(d(o))i=g(o);else{if(!u(o))return;i=[o]}const p=l(r.builderConfig);for(const n of i){const e=n.clone();for(const f of e.paths){let t=new b({spatialReference:e.spatialReference,paths:[f],hasZ:e.hasZ,hasM:e.hasM});t&&p&&(t=h(t,p)),t&&c({templatePart:r,shape:t,edits:s,relationships:m,mode:a})}if(a==="digitizing"&&s.length>P)break}}const v=!1;export{q as execute,v as isAsync};
