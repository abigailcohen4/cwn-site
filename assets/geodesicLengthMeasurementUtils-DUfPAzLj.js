import{jN as o,bQ as c,az as l,c7 as i,jO as a,jP as m,jQ as y,jR as R}from"./index-B012AMVZ.js";import{geodesicLength as f}from"./geometryEngine-Cp2agRB0.js";function O(e){return o(e)||c(e)}function p(e,n,t,...u){return o(e)?n.apply(void 0,u):c(e)?t.apply(void 0,u):null}const P=1e5;function Q(e){const{spatialReference:n}=e;return p(n,$,g,e)}function Z(e,n){if(!l(e.spatialReference,n.spatialReference))return null;const{spatialReference:t}=e;return r[0]=e.x,r[1]=e.y,r[2]=e.hasZ?e.z:0,s[0]=n.x,s[1]=n.y,s[2]=n.hasZ?n.z:0,j(r,s,t)}function j(e,n,t){return p(t,d,h,e,n,t)}function d(e,n,t){return a(y(z,e,n,t).distance,"meters")}function h(e,n,t){return a(f(x(e,n,t),"meters"),"meters")}function $(e){return a(m([e],"meters")[0],"meters")}function g(e){return a(f(e,"meters"),"meters")}function x(e,n,t){return{type:"polyline",spatialReference:t,paths:[[[...e],[...n]]]}}const z=new R,r=i(),s=i();export{O as e,Z as f,Q as m,P as p,p as r,j as u};
