import{a$ as m,aN as c,aE as g,fp as f,r as o,m as a,a as h,e as p,u as v,b1 as x,C as F,v as k,a3 as O}from"./index-Cq4wNgzh.js";import{t as _}from"./FeatureLayerViewBase3D-Ba3nqARL.js";import{_ as S}from"./FeaturePipelineRenderManager-aa0rmXWr.js";import{s as H}from"./highlightUtils-BBcxHnEP.js";import"./HeatmapDensity.glsl-8hJNkn97.js";import"./timeSupport-DiEFg1hv.js";import"./projectExtentUtils-DL75yhar.js";import"./geometryServiceUtils-H_q96P3n.js";import"./dehydratedFeatureComparison-C5nS6hw8.js";import"./queryForSymbologySnapping-BxIgk5f7.js";import"./Graphics3DFeatureProcessor-DRV4pDQM.js";import"./hash-CcEbRgUF.js";import"./ExtentSet-DZefwOjo.js";import"./optimizedFeatureQueryEngineAdapter-CGcpIDHJ.js";import"./PooledRBush-DnavqyB7.js";import"./quickselect-QQC62dOK.js";import"./popupUtils-Bh8jKC5F.js";import"./Graphics3DObjectStates-B7yjk-p_.js";import"./attributeUtils-Dc8--CBJ.js";import"./QueryEngine-DwTZfP0k.js";import"./WhereClauseCache-DB44Bt-R.js";import"./WhereClause-BU0g1weu.js";import"./FixedIntervalBinParameters-0KWH-ngp.js";import"./json-Wa8cmqdu.js";import"./QueryEngineCapabilities-B_pTbIiR.js";import"./utils-BRLGmRFd.js";import"./utils-DjrU3WZN.js";import"./ClassBreaksDefinition-DcY2Umm2.js";import"./FeatureStore-B92i1cDR.js";import"./BoundsStore-BOfR-O9I.js";import"./LayerView3D-DAElSD-2.js";import"./query-q2nCyMjX.js";import"./pbfQueryUtils-Cb77KmTK.js";import"./pbf-Dsw0Lj9N.js";import"./EventedSet-BQdgUbve.js";import"./constants-B4mRqufT.js";import"./LayerView-CPqxl2Xg.js";import"./RefreshableLayerView-N4fofBs3.js";import"./LodRenderer-t-idgawr.js";let n=class extends m{constructor(e){super(e),this.schedule=null,this._workerUpdating=!0}get updating(){return this._workerUpdating}initialize(){this._workerHandle=new Q(this.schedule,this);const{layer:e,viewSpatialReference:t,renderSpatialReference:r}=this;this.addResolvingPromise((async()=>{var d,l;await e.load();const{fullExtent:i}=e;await this._workerHandle.invokeMethod("setup",{url:((d=e.parsedUrl)==null?void 0:d.path)??"",baseQuery:e.createQuery().toJSON(),viewSpatialReference:t.toJSON(),renderSpatialReference:r.toJSON(),viewingMode:this.viewingMode,objectIdField:e.objectIdField,capabilities:e.capabilities,timeInfo:(l=e.timeInfo)==null?void 0:l.toJSON(),fieldsIndex:e.fieldsIndex.toJSON(),fullExtent:i==null?void 0:i.toJSON()})})()),this.addHandles(this._workerHandle.on("notify-updating",({updating:i})=>{this._workerUpdating=i}))}onTileTreeChange({added:e,removed:t}){if(e.length===0&&t.length===0)return;const r=e.map(y),i=t.map(y);this._workerHandle.invokeMethod("onTileTreeChange",{added:r,removed:i})}async executeQuery(e,t){const r=await this._workerHandle.invokeMethod("executeQuery",e==null?void 0:e.toJSON(),t),i=c.fromJSON(r);return this._ensureLayerOnFeatures(i),i}async executeQueryForIds(e,t){return await this._workerHandle.invokeMethod("executeQueryForIds",e==null?void 0:e.toJSON(),t)}async executeQueryForCount(e,t){return await this._workerHandle.invokeMethod("executeQueryForCount",e==null?void 0:e.toJSON(),t)}async executeQueryForExtent(e,t){const{count:r,extent:i}=await this._workerHandle.invokeMethod("executeQueryForExtent",e==null?void 0:e.toJSON(),t);return{count:r,extent:g.fromJSON(i)}}async executeQueryForLatestObservations(e,t){const r=await this._workerHandle.invokeMethod("executeQueryForLatestObservations",e==null?void 0:e.toJSON(),t),i=c.fromJSON(r);return this._ensureLayerOnFeatures(i),i}_ensureLayerOnFeatures(e){const{layer:t}=this;for(const r of e.features)r.layer=t,r.sourceLayer=t}};o([a()],n.prototype,"updating",null),o([a({constructOnly:!0})],n.prototype,"schedule",void 0),o([a({constructOnly:!0})],n.prototype,"layer",void 0),o([a({constructOnly:!0})],n.prototype,"viewSpatialReference",void 0),o([a({constructOnly:!0})],n.prototype,"renderSpatialReference",void 0),o([a({constructOnly:!0})],n.prototype,"viewingMode",void 0),o([a({constructOnly:!0})],n.prototype,"dispatchRenderCommands",void 0),o([a()],n.prototype,"_workerUpdating",void 0),n=o([h("esri.views.3d.layers.graphics.pipeline.Feature3DPipelineWorkerHandle")],n);class Q extends f{constructor(t,r){super("Feature3DPipelineWorker","setup",{},t,{strategy:"dedicated",client:r})}}function y({id:e,lij:t,extent:r}){return{id:e,lij:t,extent:r}}let u=class extends m{constructor(e){super(e),this._renderer=null,this.graphicsQuery={queryForSymbologySnapping:(t,r)=>{throw new p("unsupported-symbology-snapping")},executeQuery:async(t,r)=>await this._workerHandle.executeQuery(t,r),executeQueryForIds:async(t,r)=>await this._workerHandle.executeQueryForIds(t,r),executeQueryForCount:async(t,r)=>await this._workerHandle.executeQueryForCount(t,r),executeQueryForExtent:async(t,r)=>await this._workerHandle.executeQueryForExtent(t,r),executeQueryForLatestObservations:async(t,r)=>await this._workerHandle.executeQueryForLatestObservations(t,r)},this.maximumNumberOfFeatures=1e3}initialize(){if(this.layerView.layer.geometryType!=="point")throw new p("unsupported-geometry-type",`${this.layerView.layer.geometryType} is not supported`);this.addResolvingPromise(this.setup())}destroy(){this.removeAllHandles(),this._workerHandle.destroy(),v(this._renderer)}async setup(){const{layer:e,view:t}=this.layerView,{spatialReference:r,renderSpatialReference:i,resourceController:d}=t,l=t.state.viewingMode;if(this._renderer=new S({view:t,layerUid:e.uid}),e.type!=="feature")throw new Error("Only FeatureLayer is supported");const w=new n({schedule:s=>d.immediate.schedule(s),layer:e,viewSpatialReference:r,renderSpatialReference:i,viewingMode:l,dispatchRenderCommands:s=>this._renderer.executeRenderCommands(s)});this._workerHandle=await w.when(),this.addHandles([this.layerView.view.featureTiles.addClient(),x(()=>this.layerView.view.featureTiles.tiles,"change",s=>{this._workerHandle.onTileTreeChange(s)},{onListenerAdd:s=>this._workerHandle.onTileTreeChange({added:s.toArray(),removed:[]}),onListenerRemove:s=>this._workerHandle.onTileTreeChange({added:[],removed:s.toArray()})})])}get legendEnabled(){return!1}get hasAllFeatures(){return!1}get hasAllFeaturesInView(){return!1}get hasFullGeometries(){return!1}get symbologySnappingSupported(){return!1}get scaleVisibilitySuspended(){return!1}get suspendInfo(){return{}}get updating(){return this._workerHandle.updating}get dataUpdating(){return!1}get updatePolicy(){return F.ASYNC}get maximumNumberOfFeaturesExceeded(){return!1}get updatingProgressValue(){return 1}get usedMemory(){var e;return((e=this._renderer)==null?void 0:e.usedMemory)??0}get unloadedMemory(){return 0}get ignoresMemoryFactor(){return!0}get totalFeatures(){var e;return((e=this._renderer)==null?void 0:e.totalFeatures)??0}get performanceInfo(){const e=this.totalFeatures;return new _(new k(this.usedMemory,e,e,this.maximumNumberOfFeatures,0,null),e,e,this.maximumNumberOfFeaturesExceeded,"tiles","n/a")}get suspendResumeExtentMode(){return"computed"}forEachGraphic(e){}findGraphic(e){return null}highlight(e){return H}maskOccludee(e){return O()}async whenGraphicBounds(e,t){return null}computeAttachmentOrigin(e,t){return null}elevationAlignPointsInFeatures(e,t){throw new p("unsupported-elevation-alignment")}async doRefresh(e){}setVisibility(e,t){}getMissingAttributesForFeature(e){return null}getHydratedGeometry(e){return null}};o([a()],u.prototype,"layerView",void 0),o([a()],u.prototype,"updating",null),o([a()],u.prototype,"totalFeatures",null),u=o([h("esri.views.3d.layers.graphics.pipeline.Feature3DPipeline")],u);export{u as Feature3DPipeline};
